version: '3.2'
services:
  cie_api:
    container_name: cie-api
    # tells Compose where to look for a Dockerfile to build the image 
    # for the service.
    build: ./cie_api
    # tells the container to keep running even when there’s no daemon 
    # specified via CMD in the Dockerfile. Otherwise, it’ll shut down 
    # right after provisioning 
    tty: true
    expose:
      - 5000
    # defines where to put the server-side code in the container / Volumes 
    # are a storage mechanism within containers.
    # volumes:
    #   - './cie_api/:/home/cieuser'
    depends_on:
      - cie-db
  
  cie-db:
    container_name: cie-db
    image: mysql/mysql-server:8.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: "cie"
      MYSQL_USER: "appuser"
      MYSQL_PASSWORD: "appuser"
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_ROOT_HOST: "%"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - ./cie_api/database/:/docker-entrypoint-initdb.d
      # - /var/lib/mysql:/var/lib/mysql
  
  mongo:
    image: mongo:3.2
    restart: unless-stopped
    volumes:
     - ./data/db:/data/db
     #- ./data/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0
    labels:
      - "traefik.enable=false"
    ports:
      - "27017:27017"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove itself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'mongo:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on: 
      - mongo

  rocketchat:
    build: ../Rocket.Chat
    # command: 'sleep 99999'
    depends_on: 
      - mongo

  web:
    container_name: cie_web
    build: ./cie_frontend
    tty: true
    ports:
      - 8080:80
    depends_on:
      - cie_api
    # makes sure the loadbalancer service doesn’t start unless the backend services 
    # have started. Allows linked services to be used as 
    # references within loadbalancer, which is used in nginx.conf
    links:
      - cie_api

volumes:
  backend:
  db-data: